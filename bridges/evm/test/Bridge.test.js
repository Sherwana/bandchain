const { expectRevert } = require("openzeppelin-test-helpers");
const Bridge = artifacts.require("BridgeMock");
const ReceiverMock = artifacts.require("ReceiverMock");

require("chai").should();

contract("Bridge", ([_, owner, alice, bob]) => {
  context("Checking oracle state relay (4 validators)", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should accept correct state relay (validator power is more than 2/3)", async () => {
      await this.bridge.relayOracleState(
        "63407", // _blockHeight,
        [
          "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
          "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
          "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
          "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
          "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
        ],
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
          "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
          "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
          "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
        ],
        "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
        [
          [
            "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
            "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
            27, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
            "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
            "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
          ],
        ],
      );
    });

    it("should revert if sum of validator powers is less than 2/3)", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });

    it("should not accept out-of-order signatures", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              27, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INVALID_SIGNATURE_SIGNER_ORDER",
      );
    });

    it("should not accept invalid signature", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              // This sigature is wrong
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });
  });

  context("Checking data verification", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
        "1447", // _blockHeight
        "0xD9381E1FF03917811C175418F8E00D8C73A3EAA353BF90D67ACF93A43146D341", // _oracleIAVLStateHash
      );
    });

    it("should not accept unrelayed block", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "999999", // _blockHeight
          ["beeb", 1, "0x030000004254436400000000000000", 4, 4], // _requestPacket
          ["beeb", 6, 4, 1589711543, 1589711547, 1, "0xa8860e0000000000"], // _responsePacket
          "14235", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "14235", // subtreeVersion
              "0x31B53AC6BE8A11EF93E218CFE492A5B68D1D4479FCE3E13529514BE8E5DFB133", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "4", // subtreeSize
              "14235", // subtreeVersion
              "0x89C052A44451DC7D5B05694D67F869F83C6EEC75B2106578A0834CD18D3F5CAE", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "8", // subtreeSize
              "14235", // subtreeVersion
              "0x77BB51D79817F54DB42F6F6CEF184DF7226610B64B5599871B8058CC4A3FF6F6", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "12", // subtreeSize
              "14235", // subtreeVersion
              "0xFECF29346BE7E49B838B1DF61584B3A357CBF348BA1F95BF25177CAAE4ED1A79", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "20", // subtreeSize
              "14235", // subtreeVersion
              "0x11F8545EC7A18BACB1FDA550BB31BBACC1B56CE78369B738D75D129B91E73091", // siblingHash
            ],
            [
              true, // isDataOnRight
              "6", // subtreeHeight
              "45", // subtreeSize
              "14236", // subtreeVersion
              "0x94F8DC46C64E4E4A32E6D2A5A67557D83CEA9212CD47ED673A58C1A81D7969D8", // siblingHash
            ],
          ],
        ),
        "NO_ORACLE_ROOT_STATE_DATA",
      );
    });

    it("should accept correct data verification", async () => {
      const ret = await this.bridge.verifyOracleData(
        "1447", // _blockHeight
        ["test", 1, "0x030000004254436400000000000000", 4, 4], // _requestPacket
        ["test", 4, 4, 1590744852, 1590744857, 1, "0xd46c0e0000000000"], // _responsePacket
        "1426", // _version
        [
          [
            true, // isDataOnRight
            "1", // subtreeHeight
            "2", // subtreeSize
            "1426", // subtreeVersion
            "0xF47CBAE57D4FBE07F6DDB0B90287579F34477B5320B37760D5C4EA572FCEF2FC", // siblingHash
          ],
          [
            true, // isDataOnRight
            "2", // subtreeHeight
            "3", // subtreeSize
            "1426", // subtreeVersion
            "0x06D44912BC01B36ABC29FE9EC01137B806C7A8367E1CB6160D911E0996E75682", // siblingHash
          ],
          [
            true, // isDataOnRight
            "3", // subtreeHeight
            "7", // subtreeSize
            "1443", // subtreeVersion
            "0x5E5FAC882D52EE59650A505840B40C7B052EDD5093E838586A9FD01ED53E2D11", // siblingHash
          ],
          [
            true, // isDataOnRight
            "4", // subtreeHeight
            "11", // subtreeSize
            "1443", // subtreeVersion
            "0x85FD34BB633BDACCB43DA136594C2570E86091B8696336F993455C4831AB6278", // siblingHash
          ],
          [
            true, // isDataOnRight
            "5", // subtreeHeight
            "18", // subtreeSize
            "1443", // subtreeVersion
            "0xFAEAD3EB63723791ED5C58CECADC5080E1D9A6554C8A263B0D1798C7C8DF0D56", // siblingHash
          ],
          [
            true, // isDataOnRight
            "6", // subtreeHeight
            "26", // subtreeSize
            "1443", // subtreeVersion
            "0x3FA2246DCC9DC2971670EF8D6CB283D9BBB364C84E3302EAD738798D0B9A0C2C", // siblingHash
          ],
          [
            true, // isDataOnRight
            "7", // subtreeHeight
            "58", // subtreeSize
            "1446", // subtreeVersion
            "0x71902BBBFACAC8DA79C62FE9BC4C0057FE6BBDA847A6FB8464F4D43D38E7E131", // siblingHash
          ],
        ],
      );
      ret[0]
        .toString()
        .should.eq(
          ["test", 1, "0x030000004254436400000000000000", 4, 4].toString(),
        );
      ret[1]
        .toString()
        .should.eq(
          [
            "test",
            4,
            4,
            1590744852,
            1590744857,
            1,
            "0xd46c0e0000000000",
          ].toString(),
        );
    });

    it("should not accept invalid data verification", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "1447", // _blockHeight
          ["wrong id", 1, "0x030000004254436400000000000000", 4, 4], // _requestPacket
          ["test", 4, 4, 1590744852, 1590744857, 1, "0xd46c0e0000000000"], // _responsePacket
          "1426", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "1426", // subtreeVersion
              "0xF47CBAE57D4FBE07F6DDB0B90287579F34477B5320B37760D5C4EA572FCEF2FC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "1426", // subtreeVersion
              "0x06D44912BC01B36ABC29FE9EC01137B806C7A8367E1CB6160D911E0996E75682", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "7", // subtreeSize
              "1443", // subtreeVersion
              "0x5E5FAC882D52EE59650A505840B40C7B052EDD5093E838586A9FD01ED53E2D11", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "11", // subtreeSize
              "1443", // subtreeVersion
              "0x85FD34BB633BDACCB43DA136594C2570E86091B8696336F993455C4831AB6278", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "18", // subtreeSize
              "1443", // subtreeVersion
              "0xFAEAD3EB63723791ED5C58CECADC5080E1D9A6554C8A263B0D1798C7C8DF0D56", // siblingHash
            ],
            [
              true, // isDataOnRight
              "6", // subtreeHeight
              "26", // subtreeSize
              "1443", // subtreeVersion
              "0x3FA2246DCC9DC2971670EF8D6CB283D9BBB364C84E3302EAD738798D0B9A0C2C", // siblingHash
            ],
            [
              true, // isDataOnRight
              "7", // subtreeHeight
              "58", // subtreeSize
              "1446", // subtreeVersion
              "0x71902BBBFACAC8DA79C62FE9BC4C0057FE6BBDA847A6FB8464F4D43D38E7E131", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });

    it("should not accept incomplete proof", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "1447", // _blockHeight
          ["test", 1, "0x030000004254436400000000000000", 4, 4], // _requestPacket
          ["test", 4, 4, 1590744852, 1590744857, 1, "0xd46c0e0000000000"], // _responsePacket
          "1426", // _version
          [
            [
              true, // isDataOnRight
              "1", // subtreeHeight
              "2", // subtreeSize
              "1426", // subtreeVersion
              "0xF47CBAE57D4FBE07F6DDB0B90287579F34477B5320B37760D5C4EA572FCEF2FC", // siblingHash
            ],
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "1426", // subtreeVersion
              "0x06D44912BC01B36ABC29FE9EC01137B806C7A8367E1CB6160D911E0996E75682", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "7", // subtreeSize
              "1443", // subtreeVersion
              "0x5E5FAC882D52EE59650A505840B40C7B052EDD5093E838586A9FD01ED53E2D11", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "11", // subtreeSize
              "1443", // subtreeVersion
              "0x85FD34BB633BDACCB43DA136594C2570E86091B8696336F993455C4831AB6278", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "18", // subtreeSize
              "1443", // subtreeVersion
              "0xFAEAD3EB63723791ED5C58CECADC5080E1D9A6554C8A263B0D1798C7C8DF0D56", // siblingHash
            ],
            [
              true, // isDataOnRight
              "6", // subtreeHeight
              "26", // subtreeSize
              "1443", // subtreeVersion
              "0x3FA2246DCC9DC2971670EF8D6CB283D9BBB364C84E3302EAD738798D0B9A0C2C", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });
  });

  context("Relay and Verfiy data", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    it("should accept valid relay and verify", async () => {
      await this.receiver.relayAndSafe(
        "0x
      );
      (await this.bridge.oracleStates(1258))
        .toString()
        .should.eq(
          "0x9af8b31ea4ffd387796033c1c9ffd2026cc992604c35d6ecadbbf6ee02ee7bdf",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("");
      req[1].toString().should.eq("8");
      req[2].toString().should.eq("0x0400000066617374");
      req[3].toString().should.eq("3");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("");
      res[1].toString().should.eq("3");
      res[2].toString().should.eq("3");
      res[3].toString().should.eq("1590744537");
      res[4].toString().should.eq("1590744540");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("0x6801000000000000");
    });

    it("should accept valid relay and verify case 2", async () => {
      await this.receiver.relayAndSafe(
        "0x
      );
      (await this.bridge.oracleStates(1447))
        .toString()
        .should.eq(
          "0xd9381e1ff03917811c175418f8e00d8c73a3eaa353bf90d67acf93a43146d341",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("test");
      req[1].toString().should.eq("1");
      req[2].toString().should.eq("0x030000004254436400000000000000");
      req[3].toString().should.eq("4");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("test");
      res[1].toString().should.eq("4");
      res[2].toString().should.eq("4");
      res[3].toString().should.eq("1590744852");
      res[4].toString().should.eq("1590744857");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("0xd46c0e0000000000");
    });

    it("should revert invalid relay and verify", async () => {
      await expectRevert(
        this.receiver.relayAndSafe(
          "0x
        ),
        "RELAY_ORACLE_STATE_FAILED.",
      );

      await expectRevert(
        this.receiver.relayAndSafe(
          "0x
        ),
        "VERIFY_ORACLE_DATA_FAILED.",
      );
    });
  });

  context("Update provider powers", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should revert if update validator power by non-onwer", async () => {
      await expectRevert(
        this.bridge.updateValidatorPowers(
          [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
          {
            from: alice,
          },
        ),
        "Ownable: caller is not the owner.",
      );
    });

    it("should update a validator power", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (await this.bridge.totalValidatorPower()).toString().should.eq("450");
    });

    it("should update validator powers", async () => {
      await this.bridge.updateValidatorPowers(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 0],
          ["0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f", 200],
        ],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (
        await this.bridge.validatorPowers(
          "0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE",
        )
      )
        .toString()
        .should.eq("0");

      (
        await this.bridge.validatorPowers(
          "0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f",
        )
      )
        .toString()
        .should.eq("200");

      (await this.bridge.totalValidatorPower()).toString().should.eq("550");
    });
  });
});
